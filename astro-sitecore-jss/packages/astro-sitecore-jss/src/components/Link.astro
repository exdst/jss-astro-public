---
import { EditableFieldProps } from './sharedTypes';

export interface LinkFieldValue {
  [attributeName: string]: unknown;
  href?: string;
  title?: string;
  target?: string;
  querystring?: string;
}

export interface LinkField {
  value: LinkFieldValue;
  editableFirstPart?: string;
  editableLastPart?: string;
}

export interface Props extends EditableFieldProps {
  [htmlAttributes: string]: unknown;
  /** The link field data. */
  field: LinkField | LinkFieldValue;
  /**
  * Displays a link text ('description' in Sitecore) even when children exist
  * NOTE: when in Sitecore Experience Editor, this setting is ignored due to technical limitations, and the description is always rendered.
  */
  showLinkTextWithChildrenPresent?: boolean;
}

const { field, showLinkTextWithChildrenPresent } = Astro.props;
const children = await Astro.slots.render("default");
const dynamicField: LinkField | LinkFieldValue = field;

if (
  !field ||
  (!dynamicField.editableFirstPart && !dynamicField.value && !dynamicField.href)
) {
  return "";
}

// handle link directly on field for forgetful devs
const link = dynamicField.href ? field : dynamicField.value;
if (!link) {
  return "";
}

const linkText =
  showLinkTextWithChildrenPresent || !children || children.length === 0
    ? link.text || link.href
    : "";

const finalChildren = children ? [linkText, ...children] : linkText;

const attrs = (function () {
  const { field, class: cssClass, ...attrs } = Astro.props;
  const { showLinkTextWithChildrenPresent, ...finalAttrs } = attrs;
  return {
    ...finalAttrs,
    class: `${link.class} ${cssClass}`.trim(),
    href: link.querystring ? `${link.href}?${link.querystring}` : link.href,
    title: link.title,
    target: link.target,
  };
})();
---

{!field.editableFirstPart && <a {...attrs} set:html={finalChildren} />}
{field.editableFirstPart && 
  <Fragment set:html={field.editableFirstPart} />
  <Fragment set:html={children} />
  <Fragment set:html={field.editableLastPart} />
}