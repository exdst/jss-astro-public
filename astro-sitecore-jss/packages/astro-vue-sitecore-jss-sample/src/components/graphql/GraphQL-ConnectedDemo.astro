---
import { SitecoreContextMap, Link, Text } from '@astro-sitecore-jss/astro-sitecore-jss';
import StyleguideSpecimen from '../styleguide/Styleguide-Specimen.astro';
import GraphQLRequestClientFactory from "../../lib/graphql/graphql-request-client-factory";
import {GQLConnectedDemoService } from "../../lib/gql-service";
import type { IQueryResult, IResultsItem } from "../../lib/gql-service/types";
import config from "../../temp/config";

const sitecoreContext = SitecoreContextMap.get()['scContext'];
const graphQlRequestClientFactory = new GraphQLRequestClientFactory();
const service = new GQLConnectedDemoService(graphQlRequestClientFactory);
const { dataSource } = Astro.props.route;
const queryResult: IQueryResult<IResultsItem> = await service.getContextItemData(sitecoreContext.itemId, dataSource.replace(/[{}]/g, ''), config.defaultLanguage);
const loading = queryResult == null;
let error = queryResult?.errors && Object.values(queryResult?.errors)?.length > 0 ? queryResult.errors[0]?.message: "";

const {contextItem, datasource} = queryResult;
---
<StyleguideSpecimen route={Astro.props.route} e2eId="styleguide-fieldusage-text">
  <div>
    <div data-e2e-id="graphql-connected">
      <h2>GraphQL Connected Demo</h2>

      <p>
        Connected GraphQL executes GraphQL queries directly against the Sitecore GraphQL endpoint.
        You can review the query execution in the browser devtools network tab.
      </p>

      {loading && <p class="alert alert-info">GraphQL query is executing...</p>}
      {error && <p class="alert alert-danger">GraphQL query error: {error.toString()}</p>}      
      {datasource && (
        <div>
          <h4>Datasource Item (via Connected GraphQL)</h4>
          id: {datasource.id}
          <br />
          name: {datasource.name}
          <br />
          sample1: {datasource.sample1?.value}
          <br />
          sample1 (editable): <Text field={datasource.sample1?.jsonValue} />
          <br />
          sample2:
          <br />
          <ul>
            <li>text: {datasource.sample2?.text}</li>
            <li>url: {datasource.sample2?.url}</li>
            <li>target: {datasource.sample2?.target}</li>
            <li>
              editable: <Link field={datasource.sample2?.jsonValue?.value} />
            </li>
            <li>field type: {datasource.sample2?.definition?.type}</li>
            <li>field is shared: {datasource.sample2?.definition.shared.toString()}</li>
          </ul>
        </div>
      )}
      {contextItem && (
        <div>
          <h4>Route Item (via Connected GraphQL)</h4>
          id: {contextItem?.id}
          <br />
          page title: {contextItem.pageTitle?.value}
          <br />
          children:
          <ul>
            {contextItem?.children?.results?.map((child) => (
              <li key={child?.id}>
                <a href={child.url?.path}>
                    {child.pageTitle?.value}
                </a>                
                &nbsp; (editable title too! <Text field={child.pageTitle.jsonValue} />)
              </li>              
            ))}
          </ul>
        </div>
      )}
    </div>
  </div>
</StyleguideSpecimen>